Go言語紹介
AITC セミナー
16 Jun 2017

柴田 芳樹（Yoshiki Shibata)
ソフトウェアエンジニア、技術書翻訳、コンサルティング
http://yshibata.blog.so-net.ne.jp/
@yoshiki_shibata 

* Go言語の歴史


- 2007年9月 Robert Griesemer、Rob Pike、Ken Thompsonにより開発が始まる
- 2009年11月10日 発表：[[https://opensource.googleblog.com/2009/11/hey-ho-lets-go.html]]
- 2012年3月28日 Go1
- 2017年2月16日 Go1.8
- 現在は半年単位でリリース。Go1.9は今年の8月の予定
- Go言語の公式サイト：[[https://golang.org]]
- Go言語のリリースタイムライン：[[https://pocketgophers.com/go-release-timeline/]]

* Go言語と『プログラミング言語Go』との関わり

- 2010年8月 会社の若手エンジニアとGo言語勉強会を開始（月に1回）
- 2012年3月 Go1が正式リリース
- 2012年10月 *『プログラミング言語Goフレーズブック』* （翻訳）出版
- 2013年7月 Go言語を用いた社内プロジェクト開始
- 2015年3月 『The Go Programming Language』が執筆されていることに気付く（Amazon.comでの予約受付られる）
- 2015年4月 『The Go Programming Language』の原稿レビューアに加わる
- 2015年5月 社内プロジェクト解散
- 2015年9月 『The Go Programming Language』の執筆が終わる
- 2015年10月 *『プログラミング言語Go』* 翻訳作業開始
- 2016年5月 『プログラミング言語Go』翻訳作業終了
- 2016年6月20日 『プログラミング言語Go』全国書店で発売

* 『プログラミング言語Goフレーズブック』

.image https://images-na.ssl-images-amazon.com/images/I/51OBTgJsC3L.jpg _ 240
 
- 2012年10月発売
- 出版社: ピアソン桐原
-  *現在は、絶版*

* プログラミング言語Go

.image https://images-na.ssl-images-amazon.com/images/I/410V3ulwP5L.jpg _ 300

- 2016年6月発売
- 出版社: 丸善出版

* Go言語が目指したもの

FAQより [[http://golang.org/doc/faq]]

Go is an attempt to combine the ease of programming of an interpreted, dynamically typed language with the efficiency and safety of a statically typed, compiled language. It also aims to be modern, with support for networked and multicore computing. Finally, working with Go is intended to be fast: it should take at most a few seconds to build a large executable on a single computer. 

Goは、 *「インタプリタで動的型付け言語のプログラミングの容易さ」* と 、 *「静的型付けコンパイル言語の効率と安全性」* を組み合わせる試みです。 *ネットワークおよびマルチコアのコンピューティング* に対するサポートを持つ現代的な言語も目指している。最後に、 *Goを扱うことが高速であること* も目指している。つまり、一台のコンピュータで大きな実行ファイルをビルドするのに高々数秒であるべきである。


* Go言語の特徴

- 静的型付け言語（コンパイル言語）ながら、超高速コンパイル
- 一つの実行可能ファイルが作成される
- ガベージコレクション

* 超高速コンパイル

- 高速にコンパイルするためにパッケージ間の循環依存を禁止している。
- パッケージをコンパイルした時に、そのパッケージが依存する他のパッケージの情報を埋め込んでいる。
- コンパイルが高速なので、インタプリタ言語の感覚ですばやく実行できる。
- goコマンドで簡単にコンパイル、リンク、実行まで行える。

* Go言語をソースからビルドする時間

- Go言語のコンパイラ、ランタイム、標準ライブラリーを含むすべてのソースコードをコンパイルして、テストコードの実行時間
- Go言語のコンパイラやランタイムは、 *Go言語で書かれている* ので、古いGoのバージョンで最新のコンパイラをコンパイルしてから、全体をコンパイルする。
- .goファイル：3216ファイル
- 行数（単純にwcで計測）： 約126万行（1,261,807行）
- MacBook : 1.3 GHz Intel Core M
- 時間：10m46.924s

* 一つの実行ファイル

- 生成される実行ファイルは、.soファイルや.dllファイルに一切依存しない実行可能ファイルとして生成される。
- そのファイルだけをコピーすれば同じOS、同じCPUのコンピュータ上で実行可能。
- Goのツールチェインは、様々なOSやCPUをサポート。
-  *クロスコンパイル* も容易にできる（例：macOS上でWindows版のバイナリも作れる）。
- サポートCPU群1: amd64、386、arm
- サポートCPU群2: arm64、ppc64、ppc64le、mips、mipsle、misp64、mips64le、s390x

* ハロー、ワールド

.play src/aitc/helloworld.go 

- ソースコードは、UTF-8形式で書きます
- 実行可能ファイルのmain()関数は、mainパッケージに書きます

* ガベージコレクション

- Go1ではStop-The-Worldのガベージコレクションであった
- Go1.8では、完全にStop-The-Worldを削除
- 現在は、コンカレント・ガベージコレクタ
- GCの停止時間は100ms以下であり、たいていは10μs程度
- Go1.9でもさらに改善される予定

* Go言語の特徴

- オブジェクト指向プログラミング言語
- ポインターとアドレスを意識させる
- ヒープとスタックを意識させない
- スレッドではなく、軽量なゴルーチン（goroutine）
- ゴルーチンのスタックは、伸長可能
- ゴルーチン間の通信のためのチャネル（channel）
- リフレクションをサポート

* オブジェクト指向プログラミング言語

- 継承はサポートしていない
- 関数型を含むユーザ定義の型にメソッドを定義できる
- インタフェースをサポート（ただし、Java言語のようにインタフェースの実装を明示的に宣言する必要はない）
- コンポジションを「埋め込み」として言語仕様でサポート

* 関数とメソッド

.play src/aitc/geometry.go

* インタフェース（定義）

- ioパッケージに定義されているWriterインタフェース
.code src/aitc/io.go /^\/\/ Writer is the interface/,/^}/

* インタフェース（実装)

.play src/aitc/bytecounter.go /START OMIT/,/END OMIT/

* 埋め込み

.code src/aitc/coloredpoint.go /START OMIT/,/END OMIT/

* 埋め込み（続き）

.play src/aitc/coloredpoint.go /^func main/,/^}/

* ポインターとアドレス

- C/C++と同様にポインター型があり、変数のアドレスを取得可能
.play src/aitc/pointer.go 

- C/C++のようなアドレス演算はできない

* ヒープとスタック

.play src/aitc/stackheap.go 

* ゴルーチン（goroutine）

- ゴルーチン ≠ スレッド
- ゴルーチンは、Goのランタイムでスケジューリングされる
- 実際の処理は、OSのスレッド上で実行される（ _m:n_ スケジューリング)
- OSスレッドを1個でもすべてのゴルーチンをスケジューリング可能
- 環境変数GOMAXPROCSで指定可能（デフォルトはコア数）
- runtime.GOMAXPROCS()でプログラム的に設定可能
- Go 1.8までは最大256スレッド
- Go 1.9では最大1024スレッド

* ゴルーチン（gopl.io/ch8/spinner）

.play src/aitc/spinner.go /START OMIT/,/END OMIT/

* 伸長可能なスタック

- ゴルーチンのスタックは、自動的に伸長されていく
- 初期値：8Kバイト
- デフォルト最大値：250MB（32ビット環境）、1GB（64ビット環境）
- 最大値の変更：debug.SetMaxStack （戻り値は以前の最大値）
.play src/aitc/stacksize.go 

* チャネル（channel）

.code src/aitc/sieve.go /START OMIT/,/END OMIT/

* チャネル（続き）

.play src/aitc/sieve.go /^func main/,/^}/

* チャネル（ピンポン）

.code src/aitc/pingpong.go /START OMIT/,/END OMIT/

* チャネル（ピンポン続き）

.play src/aitc/pingpong.go /^func main/,/^}/


* 豊富なライブラリ

- 標準ライブラリ：Goのディストリビューションに標準で含まれるライブラリ
- [[https://golang.org/pkg/#stdlib]]

- サブリポジトリ：標準ではないが、Goのチームにより開発されている追加ライブラリやコマンド
- [[https://golang.org/pkg/#subrepo]]


* 標準フォーマッタ

- ツールチェインに標準フォーマッタであるgofmtが含まれる
- フォーマットはgofmtに任せる
- 各種エディタ用のプラグインが様々な人により開発されている
- 私はvimのプラグインを使っている（[[https://github.com/fatih/vim-go]]）


* 独自のテストコード記述

- 他の言語のようなxUnitフレームワークは提供されていない
- 独自にテスティング用のパッケージtestingが適用されている
- ベンチマーク測定用の機能も提供されている
- オンラインドキュメンテーションに埋め込んで実行できるサンプルコードの機能も提供されている: [[https://golang.org/pkg/encoding/json/#example_Decoder]]

* 競合状態検出機構

- race condition（競合状態）を検出する機構が提供されている
- goコマンドのbuild、run、testに-raceオプションを付けると競合状態検出機構が埋め込まれて実行される
- 動的に解析するので、実行しないと検出できない
- しかし、自動テストにより、長時間ランニングテストを行うのがベター

* Go1.9 (Comming in August 2017)

- 言語仕様変更（type alias）: 他のパッケージの型を自分のパッケージの型として再定義できる。[[https://github.com/golang/proposal/blob/master/design/18130-type-alias.md]]
- パラレルコンパイル：パッケージ内の関数を並列にコンパイルする

* プログラミング言語Go 練習問題

.image https://images-na.ssl-images-amazon.com/images/I/410V3ulwP5L.jpg _ 256

- 全部で134問
- HTTP、JSON、REST APIに関する基礎知識が必要
- 私の解答は、[[https://github.com/YoshikiShibata/gpl]]にあります
- 正誤表：[[http://www001.upp.so-net.ne.jp/yshibata/]]


