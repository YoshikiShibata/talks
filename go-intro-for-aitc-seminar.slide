Go言語紹介
AITC セミナー
16 Jun 2017

柴田 芳樹（Yoshiki Shibata)
software engineer, translator, consultant
http://yshibata.blog.so-net.ne.jp/
@yoshiki_shibata 

* Go言語の歴史

- 2007年9月 Robert Griesemer、Rob Pike、Ken Thompsonにより開発が始まる
- 2009年11月 発表
- 2012年3月28日 Go1
- 2017年2月16日 Go1.8
- 現在は半年単位でリリース。Go1.9は今年の8月の予定

* Go言語と『プログラミング言語Go』との関わり

- 2010年8月 会社の若手エンジニアとGo言語勉強会を開始（月に1回）
- 2012年3月 Go1が正式リリース
- 2012年10月 『プログラミング言語Goフレーズブック』（翻訳）出版
- 2013年7月 Go言語を用いた社内プロジェクト1701のリーダ
- 2015年3月 『The Go Programming Language』が執筆されていることに気付く
- 2015年4月 『The Go Programming Language』の原稿レビューアに加わる
- 2015年5月 プロジェクト1701解散
- 2015年9月 『The Go Programming Language』の執筆が終わる
- 2015年10月『プログラミング言語Go』翻訳作業開始
- 2016年5月 『プログラミング言語Go』翻訳作業終了
- 2016年6月20日 『プログラミング言語Go』全国書店で発売

* Go言語が目指したもの

FAQより [[http://golang.org/doc/faq]]

Go is an attempt to combine the ease of programming of an interpreted, dynamically typed language with the efficiency and safety of a statically typed, compiled language. It also aims to be modern, with support for networked and multicore computing. Finally, working with Go is intended to be fast: it should take at most a few seconds to build a large executable on a single computer. 

Goは、「インタプリタで動的型付け言語のプログラミングの容易さ」と 、「静的型付けコンパイル言語の効率と安全性」を組み合わせる試みです。ネットワークおよびマルチコアのコンピューティングに対するサポートを持つ現代的な言語も目指している。最後に、Goを扱うことが高速であることも目指している。つまり、一台のコンピュータで大きな実行ファイルをビルドするのに高々数秒であるべきである。


* Go言語の特徴

- 静的型付け言語（コンパイル言語）ながら、超高速コンパイル
- 一つの実行可能ファイルが作成される
- ガベージコレクション

* 超高速コンパイル

- 高速にコンパイルするためにパッケージ間の循環依存を禁止しており、循環しているとコンパイルエラーとなる。
- パッケージをコンパイルした時に、そのパッケージが依存する他のパッケージの情報を埋め込んでいる。Goのソースコードがインポートしているパッケージの情報を読むだけで、そのGoのソースコードをコンパイルできる。
- コンパイルが高速なので、インタプリタ言語の感覚ですばやく実行できる

* Go言語をソースからビルドする時間

- Go言語のコンパイラ、ランタイム、標準ライブラリーを含むすべてのソースコードをコンパイルして、テストコードの実行時間
- Go言語のコンパイラやランタイムは、Go言語で書かれているために、古いGoのバージョンで最新のコンパイラをコンパイルしてから、全体をコンパイルする。
- .goファイル：3216ファイル
- 行数（単純にwcで計測）： 約126万行（1,261,807行）
- MacBook : 1.3 GHz Intel Core M
- 時間：10m46.924s

* 一つの実行ファイル

- 生成される実行ファイルは、.soファイルや.dllファイルに一切依存しない実行可能ファイルとして生成される。
- そのファイルだけをコピーすれば同じOS、同じCPUのコンピュータ上で実行可能。
- Goのツールチェインは、様々なOSやCPUをサポート。
- クロスコンパイルも容易にできる（例：macOS上でWindows版のバイナリも作れる）。
- サポートCPU群1: amd64、386、arm
- サポートCPU群2: arm64、ppc64、ppc64le、mips、mipsle、misp64、mips64le、s390x

* ガベージコレクション

- Go1ではStop-The-Worldのガベージコレクションであった
- Go1.8では、完全にStop-The-Worldを削除
- GCの停止時間は100ms以下であり、たいていは10μs程度
- Go1.9でもさらに改善される予定

* Go言語の特徴

- オブジェクト指向プログラミング言語
- ポインターとアドレスという概念が存在
- ヒープとスタック
- スレッドではなく、軽量なゴルーチン（goroutine）
- 伸長可能なスタック
- ゴルーチン間の通信としてのチャネル（channel）
- 型の自動変換がほとんどない
- リフレクション

* オブジェクト指向プログラミング言語

- 継承はサポートしていない
- ユーザ定義の型にメソッドを定義できる
- インタフェースをサポート（ただし、Java言語のようにインタフェースの実装を明示的に宣言する必要はない）
- コンポジションをサポート

* 関数とメソッド

.play src/aitc/geometry.go

* ポインターとアドレス

- C/C++と同様にポインター型があり、変数のアドレスを取得可能
.play src/aitc/pointer.go 

- C/C++のようなアドレス演算はできない

* ヒープとスタック

- TBD

* ゴルーチン（goroutine）

- TBD

* 伸長可能なスタック

- ゴルーチンのスタックは、自動的に伸長されていく
- 初期値：8Kバイト
- デフォルト最大値：250MB（32ビット環境）、1GB（64ビット環境）
- 最大値の変更：debug.SetMaxStack （戻り値は以前の最大値）
.play src/aitc/stacksize.go 

* チャネル（channel）

- TBD 


* ハロー、ワールド

.play src/aitc/helloworld.go 
